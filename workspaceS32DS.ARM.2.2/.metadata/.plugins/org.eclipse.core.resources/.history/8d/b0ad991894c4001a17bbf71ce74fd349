/*
//Blimk red led and blue led
#include "S32K144.h"

int delay(int count){
	while (count > 0){
		count--;
	}
	return 0;
}
int main(void) {
//enable clock port D
    PCC->PCCn[PCC_PORTD_INDEX] = 0x40000000;
    PORTD->PCR[15] = 0x0000100;	//Pin D15 as GPIO
    PORTD->PCR[0] = 0x0000100;	//Pin D15 as GPIO
    PTD->PDDR = 0x00008001;	//    Pin D15 as output
    PTD->PSOR=0x00000001;
    for (;;) {
    	PTD->PTOR = 0x00008001;
    	delay(50000);
    }

    return 0;
}
 */

#include "S32K144.h" /* include peripheral declarations S32K144 */

#define PTD0 0 /* Port PTD0, bit 0: FRDM EVB output to blue LED */
#define PTC12 12 /* Port PTC12, bit 12: FRDM EVB input from BTN0 [SW2] */

void WDOG_disable (void){
    WDOG->CNT=0xD928C520; /*Unlock watchdog*/
    WDOG->TOVAL=0x0000FFFF; /*Maximum timeout value*/
    WDOG->CS = 0x00002100; /*Disable watchdog*/
}

void Delay(int ms){
	ms*=5000;
	while (ms){--ms;}
}

void PORTC_IRQHandler(){
	if (PTC->PIDR == 0){
		PTD->PTOR = 1 << PTD0;
		Delay(200);
		S32_NVIC->ICPR[PORTD_IRQn/32] = 1 << (PORTD_IRQn % 32);
		PORTC->PCR[12] |= PORT_PCR_ISF(0);
	}
}

int main(void) {
    WDOG_disable();
    /* Enable clocks to peripherals (PORT modules) */
    PCC-> PCCn[PCC_PORTC_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT C */
    PCC-> PCCn[PCC_PORTD_INDEX] = PCC_PCCn_CGC_MASK; /* Enable clock to PORT D */


    /* Configure port C12 as GPIO input (BTN 0 [SW2] on EVB) */
    PTC->PDDR &= ~(1<<PTC12); /* Port C12: Data Direction= input (default) */
    PORTC->PCR[12] = 0x00000110; /* Port C12: MUX = GPIO, input filter enabled */


    PORTC->PCR[12] |= PORT_PCR_PS(1);
    PORTC->PCR[12] |= PORT_PCR_PE(1);
    PORTC->PCR[12] |= PORT_PCR_IRQC(10);
    PORTC->PCR[12] |= PORT_PCR_ISF(0);

    S32_NVIC->ICPR[PORTC_IRQn/32] = 1 << (PORTC_IRQn % 32);
    S32_NVIC->ISER[PORTC_IRQn/32] = 1 << (PORTC_IRQn % 32);
    S32_NVIC->IP[PORTC_IRQn] = 0xA;

    /* Configure port D0 as GPIO output (LED on EVB) */
    PTD->PDDR |= 1<<PTD0; /* Port D0: Data Direction= output */
    PORTD->PCR[0] = 0x00000100; /* Port D0: MUX = GPIO */

    PTD-> PCOR |= 1<<PTD0;
    while(1){
    }
    return 0;
}

